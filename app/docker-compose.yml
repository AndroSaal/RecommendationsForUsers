services:

  zookeeper:
    # conteiner_name: zookeeper
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_ID: 3
      ZOOKEEPER_SYNC_LIMIT: 4
  
  kafka1:
    container_name: kafka1
    # hostname: kafka1
    image: confluentinc/cp-kafka:latest
    ports:
      - 9091:9091
    links:
      - zookeeper
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:9091
      KAFKA_CREATE_TOPICS: "user_updates:4:2,product_updates:4:2"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9020:8080
    depends_on:
      - kafka1
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  user-service:
    container_name: user-service
    image: user-service
    build:
      context: ./services/user
      dockerfile: local.Dockerfile
    environment:
      - DB_HOST=user-postgres
      - KAFKA_ADDRS=kafka1:9092
      - KAFKA_TOPIC=user_updates
    ports:
      - "8080:8080"
    volumes:
      - ./services/user:/usr/src/app
    depends_on:
      - user-postgres
      - kafka1

  user-postgres:
    container_name: user-postgres
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "qwerty"
      PGSSLMODE: "disable"
    volumes:
      - ./services/user/migration/000001_init.up.sql:/docker-entrypoint-initdb.d/initdb.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  product-service:
    container_name: product-service
    image: product-service
    build:
      context: ./services/product

      dockerfile: local.Dockerfile
    environment:
      - DB_HOST=product-postgres
      - KAFKA_ADDRS=kafka1:9092
      - KAFKA_TOPIC=product_updates
    ports:
      - "8081:8080"
    volumes:
      - ./services/product:/usr/src/app
    depends_on:
      - product-postgres
      - kafka1

  product-postgres:
    container_name: product-postgres
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "qwerty"
      PGSSLMODE: "disable"
    volumes:
      - ./services/product/migration/000001_init.up.sql:/docker-entrypoint-initdb.d/initdb.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  recommendation-service:
    container_name: recommendation-service
    image: recommendation-service
    build:
      context: ./services/recommendation
      dockerfile: local.Dockerfile
    environment:
      - DB_HOST=recommendation-postgres
      - KAFKA_ADDRS=kafka1:9092
      - KAFKA_TOPIC=user_updates,product_updates
      - REDIS_ADDR=redis:6379
    ports:
      - "8082:8080"
    volumes:
      - ./services/recommendation:/usr/src/app
    depends_on:
      - recommendation-postgres
      - kafka1

  recommendation-postgres:
    container_name: recommendation-postgres
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "qwerty"
      PGSSLMODE: "disable"
    volumes:
      - ./services/recommendation/migration/000001_init.up.sql:/docker-entrypoint-initdb.d/initdb.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  analytics-service:
    container_name: analytics-service
    image: analytics-service
    build:
      context: ./services/analytics
      dockerfile: local.Dockerfile
    environment:
      - DB_HOST=analytics-postgres
      - KAFKA_ADDRS=kafka1:9092
      - KAFKA_TOPIC=user_updates,product_updates
      - REDIS_ADDR=redis:6379
    ports:
      - "8083:8080"
    volumes:
      - ./services/analytics:/usr/src/app
    depends_on:
      - analytics-postgres
      - kafka1

  analytics-postgres:
    container_name: analytics-postgres
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "qwerty"
      PGSSLMODE: "disable"
    volumes:
      - ./services/analytics/migration/000001_init.up.sql:/docker-entrypoint-initdb.d/initdb.sql
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always