swagger: "2.0"

info:
  version: 1.0.0
  title: User API
  description: |
    API Для управлениея ползователями
    Основыне функции: Регистрация, получение информации, обновление
host: localhost:8080
schemes:
- http
paths:
  /sing-up:
    post:
      summary: Регистрация
      description: |
        Эндпойнт заносит данные о новом пользователе в базу, отправляет
        код поддтверждения на указанный email, и возвращает 
      operationId: singUpUser
      parameters:
        - name: userInfo
          in: body
          schema:
            $ref: "#/definitions/userInfo"
          description: Регистрация нового пользователя
          required: true
      responses:
        "200":
          description: Успешно добавлен новый пользователь, письмо отправлено
          schema:
            $ref: "#/definitions/userId"
        "400":
          description: Неверный формат запроса или его параметры.
          schema:
            $ref: "#/definitions/errorResponse"
        "409":
          description: Пользователь с таким email уже существует.
          schema:
            $ref: "#/definitions/errorResponse"
        "500":
          description: Ошибка сервера.

  /sing-up/{userId}:
    get:
      summary: Получение информации
      description: |
        Эндпойнт возвращает информацию о пользователе по userId
      operationId: getUserById
      parameters:
        - name: userId
          type: integer
          description: Уникальный id пользователя
          in: query
          required: false
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: "#/definitions/userInfo"
        "400":
          description: Неверный формат запроса или его параметры.
          schema:
            $ref: "#/definitions/errorResponse"
        "401":
          description: Пользователь не найден.
          schema:
            $ref: "#/definitions/errorResponse"
        "500":
          description: Ошибка сервера.

  /sing-up/{email}/:
    get:
      summary: Получение информации
      description: |
        Эндпойнт возвращает информацию о пользователе по email
      operationId: getUserByEmail
      parameters:
        - name: email
          type: string
          description: Email пользователя.
          maxLength: 64
          in: query
          required: false
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: "#/definitions/userInfo"
        "400":
          description: Неверный формат запроса или его параметры.
          schema:
            $ref: "#/definitions/errorResponse"
        "401":
          description: Пользователь не найден.
          schema:
            $ref: "#/definitions/errorResponse"
        "500":
          description: Ошибка сервера.

  /sing-up/{userId}/edit:
    patch:
      summary: Обновление профиля
      description: |
        Эндпойнт обновляет информацию о существующем пользователe
      operationId: editUser
      parameters:
        - name: userId
          type: integer
          description: Уникальный id пользователя
          in: path
          required: true
        - name: userInfo
          in: body
          description: Обновление информации о пользователе
          required: true
          schema:
            $ref: "#/definitions/userInfo"
      responses:
        "200": 
          description: Информация о пользователе успешно обновлена, и возвращается
          schema:
            $ref: "#/definitions/userInfo"
        "400":
          description: Неверный формат запроса или его параметры.
          schema:
            $ref: "#/definitions/errorResponse"
        "401":
          description: Пользователь не найден - не существует или введен некоректно.
          schema:
            $ref: "#/definitions/errorResponse"
        "500":
          description: Ошибка сервера.

  /sing-up/{userId}/verify-email:
    put:
      summary: Подтверждение email
      description: |
        Введение кода отправленного в /sing-up, если код введен вверным, изменение статуса 
        служебного поля is_email_verified = true
      operationId: verifyEmail
      parameters:
        - name: userId
          type: integer
          description: Уникальный id пользователя
          in: path
          required: true
        - name: code
          in: query
          required: true
          type: string
          maxLength: 5
          minLength: 5
          pattern: '^[0-9]{5}$'
      responses:
        "200":
          description: Email успешно подтвержден
          schema:
            type: string
        "400":
          description: Неверный формат запроса или его параметры (в том числе неверный код).
          schema:
            $ref: "#/definitions/errorResponse"
        "401":
          description: Пользователь не существует или некорректен.
          schema:
            $ref: "#/definitions/errorResponse"
        "500":
          description: Сервер не готов обрабатывать запросы.

definitions:
    userId:
      type: integer
      description: Уникальный id пользователя
      example: 0
    username:
      type: string
      description: Ник (псевдоним, имя) пользователя (не уникальный).
      maxLength: 20
      minLength: 1
      patttern: '[a-zA-Z0-9_]'
      example: user007
    email:
      type: string
      description: Email пользователя.
      pattern: ^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-z]{2,}$
      maxLength: 64
      minLength: 10
      example: user@gmail.com
    password:
      type: string
      description: Пароль пользователя.
      maxLength: 32
      minLength: 8
      pattern: '^[a-zA-Z][a-zA-Z0-9!@#$%^&()*]+$'
      example: Password123)
    userDiscription:
      type: string
      description: Описание пользователя.
      maxLength: 1024
    userInterest:
      type: string
      description: Интерес пользователя - ключевое слово.
      maxLength: 32
    userAge:
      type: integer
      maximum: 150
      minimum: 5
    errorResponse:
      type: object
      description: Используется для возвращения ошибки пользователю
      properties:
        reason:
          type: string
          description: Описание ошибки в свободной форме
          minLength: 5
      required:
        - reason
      example:
        reason: Объяснение, почему запрос пользователя не может быть обработан
    userInfo:
      type: object
      description: Информация о пользователе
      properties:
        username:
          $ref: "#/definitions/username"
        email:
          $ref: "#/definitions/email"
        password: 
          $ref: "#/definitions/password"
        discription:  
          $ref: "#/definitions/userDiscription"
        interests:
          type: array
          items:
            $ref: "#/definitions/userInterest"
          example:
            - Манхва
            - Футбол
            - Сашими
            - School
        age:
          $ref: "#/definitions/userAge"